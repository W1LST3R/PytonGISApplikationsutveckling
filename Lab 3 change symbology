# -*- coding: utf-8 -*-

import arcpy
import os
import locale

class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the
        .pyt file)."""
        self.label = "Toolbox"
        self.alias = "toolbox"

        # List of tool classes associated with this toolbox
        self.tools = [Tool]


class Tool(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Tool"
        self.description = ""
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        params = None
        return params

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        return

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        path_skane = r"H:\DVG304 GIS Applikationsutveckling\Lab 3\Lab 3\Lab 3.gdb"
        path_lab3 = r"H:\DVG304 GIS Applikationsutveckling\Lab 3\ekdata"
        skane = "SkaneLayer"
        ek ="ek"
        skane_path = os.path.join(path_skane,skane)
        ek_path = os.path.join(path_lab3,ek)
        kommunName = 'Name_2'

        desc = arcpy.Describe(skane_path)
        if desc.shapeType == 'Polygon':
           
            p=arcpy.mp.ArcGISProject('current')
            m=p.listMaps('Map')[0]
            lyr=m.listLayers('SkaneLayer')[0]
            sym=lyr.symbology

            sym.updateRenderer('GraduatedColorsRenderer')
            sym.renderer.classificationField = 'EkarTot'
            sym.classificationMethod = 'NaturalBreaks'
            sym.renderer.breakCount = 16
            breakVal = 15
            cv = 10
            #Multiplies with the breakVal so that it gets high enough
            multi = 2
            for brk in sym.renderer.classBreaks:
                brk.upperBound = breakVal
                brk.label = "Det är "+"\u2264" + str(locale.format("%d", breakVal, grouping=True))+" ekar i länet"
                brk.description = "Description " + str(cv)
                brk.symbol.color = {'HSV' : [120, 0+cv, 100-cv, 100]}
                brk.symbol.outlineColor = {'HSV' : [100, 100, 0, 100]}
                breakVal +=10*multi
                cv += 5
                multi += 2
                

            lyr.symbology = sym.renderer

       
        return

    def postExecute(self, parameters):
        """This method takes place after outputs are processed and
        added to the display."""
        return
