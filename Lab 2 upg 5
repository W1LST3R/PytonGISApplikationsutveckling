# -*- coding: utf-8 -*-

import arcpy
import os


class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the
        .pyt file)."""
        self.label = "Toolbox"
        self.alias = "toolbox"

        # List of tool classes associated with this toolbox
        self.tools = [Tool]


class Tool(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Input Search Tool"
        self.description = ""
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        params = [
            arcpy.Parameter(
                displayName='Input Features',
                name='in_features',
                datatype='GPFeatureLayer',
                parameterType='Required',
                direction='Input'
            ),
            arcpy.Parameter(
                displayName='Field to Search',
                name='search_field',
                datatype='GPString',
                parameterType='Required',
                direction='Input'
            ),
            arcpy.Parameter(
                displayName="Value to Search ",
                name ='search_value',
                datatype="GPString",
                parameterType="Required",
                direction="Input"
            ),
            arcpy.Parameter(
                displayName='Seccond Input Features',
                name='seccond_in_features',
                datatype='GPFeatureLayer',
                parameterType='Required',
                direction='Input'
            )
            ]
        params[1].parameterDependencies = [params[0].name]
        params[1].filter.list = ['NAME','NAME_LONG']
        params[2].parameterDependencies = [params[1].name]
       
        return params

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        #when the value of parameters[1] change it loops threw that column too add all thoose values to parameters[2]
        if parameters[1].altered:
            folder_path = r"H:\DVG304 GIS Applikationsutveckling\Lab 2\P2_files\Lab2.gdb"
            feature_class = parameters[0].valueAsText
            fc_path = os.path.join(folder_path,feature_class)
            field_name = parameters[1].valueAsText

            cursor = arcpy.da.SearchCursor(in_table=fc_path,field_names=field_name)
            country = []
            for i in cursor:
                country.append(str(i[0]))

            country = sorted(country) 
            parameters[2].filter.list = country  
        return

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        #prints out all countries that has a border against the selected border and also prints out airports in thoose contries
        arcpy.AddMessage('-Starting the process for (5)-')
        folder_path = r"H:\DVG304 GIS Applikationsutveckling\Lab 2\P2_files\Lab2.gdb"
        feature_class = parameters[0].valueAsText
        country_name = parameters[2].valueAsText
        airport = parameters[3].valueAsText
        field_name = parameters[1].valueAsText
        air_path = os.path.join(folder_path, airport)
        fc_path = os.path.join(folder_path,feature_class)

        sql = "{} = '{}'".format(arcpy.AddFieldDelimiters(fc_path, field_name), country_name)
        #Makes a layer of the selected country
        countryLayer=arcpy.arcpy.MakeFeatureLayer_management(fc_path, 'CountryLayer', where_clause = sql)

        #Selects all countries that touche the selected country and makes a layer of the result
        result = arcpy.SelectLayerByLocation_management(fc_path, 'BOUNDARY_TOUCHES', countryLayer)
        neighborsLayer=arcpy.MakeFeatureLayer_management(result, 'NEW_SELECTION')
        
        arcpy.AddMessage('Countries that has a border against '+country_name)

        #loops threw all countries and ads the names to a tulip if it is not the selected country
        cursorsql = "{} <> '{}'".format(arcpy.AddFieldDelimiters(fc_path, field_name), country_name)
        cursor = arcpy.da.SearchCursor(in_table=neighborsLayer,field_names=field_name, where_clause=cursorsql)

        neighborNames=[]
        for names in cursor:
            neighborNames.append(str(names[0]))

        neighborNames=sorted(neighborNames)
        arcpy.AddMessage(neighborNames)

        #loops threw all neigbors and prints out the airports in the country
        for country in neighborNames:

            #Makes a layer of the country
            sql = "{} = '{}'".format(arcpy.AddFieldDelimiters(fc_path, field_name), country)
            neighborLayer=arcpy.MakeFeatureLayer_management(fc_path, 'NeigborLayer',where_clause=sql)

            #Selects all airport within the country and adds their name to a tulip
            result = arcpy.SelectLayerByLocation_management(air_path,'WITHIN',neighborLayer)
            airportLayer = arcpy.MakeFeatureLayer_management(result, 'AirportLayer')
            cursor = arcpy.da.SearchCursor(in_table=airportLayer,field_names="name")

            arcpy.AddMessage('----Airports in '+country+'----')
            airportNames=[]
            for i in cursor:
                airportNames.append(str(i[0]))
            arcpy.AddMessage(sorted(airportNames))
            arcpy.Delete_management(neighborLayer)
            arcpy.Delete_management(airportLayer)
            
        arcpy.Delete_management(neighborsLayer)
        arcpy.Delete_management(countryLayer)
        arcpy.AddMessage('-Done with process for (5)-')
        
        return

    def postExecute(self, parameters):
        """This method takes place after outputs are processed and
        added to the display."""
        return


